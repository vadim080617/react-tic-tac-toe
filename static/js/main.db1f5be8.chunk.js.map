{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Moves.jsx","utils/index.js","components/Game.jsx","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","winnerLine","includes","key","squares","map","el","rowIndex","colIndex","renderSquare","React","Component","Moves","toggleReverse","setState","isReversedView","state","step","isCurrent","rowArr","temporarryArr","forEach","index","arr","push","length","row","tempArrayIndex","result","onJumpTo","history","currentStep","list","move","desc","renderView","reverse","calculateWinner","lines","a","b","c","winner","line","Game","handleJumpTo","stepNumber","xIsNext","checkingBoard","Array","fill","status","slice","concat","current","winnerResult","some","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db1f5be8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Square(props) {\r\n  return (\r\n    <button\r\n      className={`square ${props.className}`}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport Square from './Square'\r\n\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return <Square\r\n      className={this.props.winnerLine.includes(i) ? 'win-field' : ''}\r\n      key={i}\r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)}\r\n    />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\r\n          ['3', 'element', 'array'].map((el, rowIndex) =>\r\n            <div key={rowIndex} className=\"board-row\">\r\n              {\r\n                ['3', 'element', 'array'].map((el, colIndex) => this.renderSquare(3 * rowIndex + colIndex))\r\n              }\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\n\r\nexport default class Moves extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isReversedView: false,\r\n    }\r\n  }\r\n\r\n  renderView(step, isCurrent = false) {\r\n    const { squares } = step;\r\n    const rowArr = [];\r\n    let temporarryArr = [];\r\n\r\n    squares.forEach((el, index, arr) => {\r\n      temporarryArr.push(el);\r\n      if (temporarryArr.length === 3 || index === arr.length - 1) {\r\n        const row = <div key={`row${(index + 1) / 3}`}>\r\n          {\r\n            temporarryArr.map((el, tempArrayIndex) =>\r\n              <div className={`historyCell ${isCurrent ? 'current-cell' : ''}`} key={index - 1 + tempArrayIndex}>{el || ' '}</div>)\r\n          }\r\n        </div>\r\n        rowArr.push(row);\r\n        temporarryArr = [];\r\n      }\r\n    });\r\n\r\n    const result = <div className=\"historyView\">{rowArr.map(el => el)}</div>\r\n    \r\n    return result;\r\n  }\r\n\r\n  toggleReverse = () => {\r\n    this.setState({ isReversedView: !this.state.isReversedView })\r\n  }\r\n\r\n  render() {\r\n    const { onJumpTo, history, currentStep } = this.props;\r\n    const { isReversedView } = this.state;\r\n\r\n    let list = history.map((step, move) => {\r\n      const desc = move ?\r\n        'To move #' + move :\r\n        'To start';\r\n      return (\r\n        <li className=\"historyStep\" key={move}>\r\n          <button onClick={() => onJumpTo(move)}>{desc}</button>\r\n          {this.renderView(step, currentStep === move)}\r\n        </li>\r\n      );\r\n    })\r\n\r\n    if (isReversedView) {\r\n      list = list.reverse();\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <button onClick={this.toggleReverse}>Sort moves {isReversedView ? 'desc' : 'asc'}</button>\r\n        </div>\r\n        <ol>{list}</ol>\r\n      </div>);\r\n  }\r\n}","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        line: [a, b, c]\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function isDraw(squares) {\r\n  return !squares.some(el => !el);\r\n}","import React from 'react';\r\n\r\nimport Board from './Board';\r\nimport Moves from './Moves';\r\n\r\nimport { calculateWinner, isDraw } from '../utils'\r\n\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      status: 'Next player: X',\r\n      winnerLine: [],\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length,\r\n    }, this.checkingBoard);\r\n  }\r\n\r\n  handleJumpTo = step => {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    }, this.checkingBoard);\r\n  }\r\n\r\n  checkingBoard() {\r\n    const { history, stepNumber } = this.state;\r\n    const current = history[stepNumber];\r\n    const winnerResult = calculateWinner(current.squares);\r\n    let status;\r\n    let winnerLine = [];\r\n\r\n    if (!winnerResult) {\r\n      if (isDraw(current.squares)) {\r\n        status = 'It\\'s a DRAW!';\r\n      } else {\r\n        status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n      }\r\n    } else {\r\n      const { winner, line } = winnerResult;\r\n      winnerLine = line;\r\n      status = `Winner ${winner}`;\r\n    }\r\n\r\n    this.setState({\r\n      status,\r\n      winnerLine\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { history, status, winnerLine, stepNumber } = this.state;\r\n    const current = history[stepNumber];\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board onClick={i => this.handleClick(i)} squares={current.squares} winnerLine={winnerLine} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div className=\"status\">{status}<hr /></div>\r\n          <Moves onJumpTo={this.handleJumpTo} currentStep={stepNumber} history={history} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Game from './components/Game';\r\nimport './index.css';\r\n\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n"],"sourceRoot":""}